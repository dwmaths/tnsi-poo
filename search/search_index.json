{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"La programmation orient\u00e9e objet","text":"<p>En programmation orient\u00e9e objet (POO), un objet repr\u00e9sente un concept, une id\u00e9e ou toute entit\u00e9 du monde physique, comme une voiture, une personne ou encore une page d'un livre. Il poss\u00e8de une structure interne et sait interagir avec ses pairs.  </p> <p>Il s'agit donc de repr\u00e9senter ces objets et leurs relations ; l'interaction entre les objets via leurs relations permet de concevoir et r\u00e9aliser les fonctionnalit\u00e9s attendues et de mieux r\u00e9soudre le ou les probl\u00e8mes. </p>"},{"location":"#creer-des-nouveaux-objets","title":"Cr\u00e9er des nouveaux objets","text":""},{"location":"#pour-commencer","title":"Pour commencer","text":"<p>La cr\u00e9ation d'un nouvel objet passe en python, par l'implantation d'une classe.  </p> <p>Premier exemple</p> <ol> <li>Dans un fichier python nomm\u00e9 eleve.py, coller le code suivant : Implantation d'une classe Eleve<pre><code>class Eleve:\n    pass\n</code></pre></li> <li>Il est possible \u00e0 pr\u00e9sent de cr\u00e9er des nouveaux \u00e9l\u00e8ves. Dans la console, tester les instructions suivantes : Nouveaux \u00e9l\u00e8ves<pre><code>mathis = Eleve()\nelise  = Eleve()\n</code></pre></li> <li> <p>Ces deux \u00e9l\u00e8ves sont-ils en relation ? Tester l'instruction Nouveaux \u00e9l\u00e8ves<pre><code>mathis == elise\n</code></pre></p> <p>Important</p> <p>Cela signifie que l'objet <code>mathis</code> n'est pas le m\u00eame objet que <code>elise</code> m\u00eame s'ils sont tous les deux  du m\u00eame type.  </p> <p>D'ailleurs les instructions <code>type(mathis)</code> et <code>type(elise)</code> le prouvent. </p> </li> </ol> <p>Ces objets n'ont pour le moment aucune caract\u00e9ristique. Rien ne permet de diff\u00e9rencier l'\u00e9l\u00e8ve Mathis de l'\u00e9l\u00e8ve \u00c9lise.  </p> <p>Personnalisation</p> <ol> <li> <ol> <li>Nous allons fournir \u00e0 Mathis et \u00c9lise quelques propri\u00e9t\u00e9s. Modifier le code de eleve.py avec le code suivant : Implantation d'une classe Eleve<pre><code>class Eleve:\n    pass\n\nmathis = Eleve()\nelise  = Eleve()\n\nmathis.nom = \"Catteau\"\n</code></pre></li> <li> <p>Dans la console, tester l'instruction <code>mathis.nom</code> puis l'instruction <code>elise.nom</code>.</p> <p>Attention</p> <p>Lorsqu'on d\u00e9finit une propri\u00e9t\u00e9 \u00e0 un objet en dehors de la classe, elle n'est pas partag\u00e9e par les autres objets du m\u00eame type.</p> </li> </ol> </li> <li> <ol> <li>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n    nom = \"Catteau\"\n\nmathis = Eleve()\nelise  = Eleve()\n</code></pre></li> <li> <p>Tester dans la console chacune des instructions suivantes : Quelques contr\u00f4les<pre><code>mathis.nom\nelise.nom\nEleve.nom\n</code></pre></p> <p>Attention</p> <p>Quand on d\u00e9finit une propri\u00e9t\u00e9 \u00e0 l'int\u00e9rieur d'une classe, elle est partag\u00e9e entre tous les objets du type de la classe.</p> </li> </ol> </li> <li> <ol> <li>Ajouter une propri\u00e9t\u00e9 <code>age</code> initialis\u00e9e \u00e0 17 dans la classe <code>Eleve</code>.</li> <li>V\u00e9rifier que les instructions <code>mathis.age</code> et <code>elise.age</code> renvoient bien <code>17</code>.</li> <li>Tester l'instruction <code>Eleve.age += 1</code> et consulter l'\u00e2ge des deux \u00e9l\u00e8ves.</li> <li>Tester l'instruction <code>mathis.age += 1</code> et consulter l'\u00e2ge des deux \u00e9l\u00e8ves.</li> <li> <p>Tester l'instruction <code>Eleve.age += 1</code> et consulter l'\u00e2ge des deux \u00e9l\u00e8ves.</p> <p>Attention</p> <p>Quand on modifie la propri\u00e9t\u00e9 d'un objet immutable depuis l'objet lui-m\u00eame, cela cr\u00e9\u00e9 une nouvelle r\u00e9f\u00e9rence vers cette propri\u00e9t\u00e9 et la propri\u00e9t\u00e9 initiale est oubli\u00e9e.  </p> <p>Ce comportement n'est plus vrai avec des objets mutables comme les listes.</p> </li> </ol> </li> <li> <ol> <li>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n    nom = \"Catteau\"\n    age = 17\n    notes = [20, 13, 15]\n\nmathis = Eleve()\nelise  = Eleve()\n</code></pre></li> <li>Tester l'instruction <code>mathis.notes.append(5)</code> et v\u00e9rifier qu'\u00c9lise a aussi h\u00e9rit\u00e9 d'un 5.</li> </ol> </li> </ol> <p>Les objets peuvent donc partager des propri\u00e9t\u00e9s mais ils peuvent aussi partager des actions. Pour cela, il suffit de d\u00e9finir des fonctions \u00e0 l'int\u00e9rieur de la classe.</p> <p>Partage d'actions</p> <ol> <li> <ol> <li>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n    nom = \"Catteau\"\n    age = 17\n\n    def vieillir():\n        Eleve.age += 1\n\nmathis = Eleve()\nelise  = Eleve()\n</code></pre></li> <li>Tester les instructions <code>mathis.age</code>, <code>Eleve.vieillir()</code> puis v\u00e9rifier que Mathis et \u00c9lise ont vieilli.</li> <li> <p>Quelle erreur provoque l'instruction <code>mathis.vieillir()</code> ?</p> <p>Attention</p> <p>Quand on appelle une action depuis un objet cr\u00e9\u00e9 (comme dans l'instruction <code>mathis.vieillir()</code>), python transforme l'instruction en <code>Eleve.vieillir(mathis)</code> ce qui explique l'erreur obtenue.  </p> <p>Pour pouvoir appliquer une action depuis un objet cr\u00e9\u00e9, il faut donc ajouter un param\u00e8tre \u00e0 la fonction d\u00e9crivant l'action. Ce param\u00e8tre fait implicitement r\u00e9f\u00e9rence \u00e0 l'objet qui appelle l'action. Par convention, on le nomme self.</p> </li> </ol> </li> <li> <ol> <li> <p>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n    nom = \"Catteau\"\n    age = 17\n\n    def vieillir(self):\n        self.age += 1\n\nmathis = Eleve()\nelise  = Eleve()\n</code></pre></p> <p>Remarque</p> <p>Comme <code>self</code> fait r\u00e9f\u00e9rence \u00e0 l'objet cr\u00e9\u00e9 (par exemple <code>mathis</code>), l'instruction <code>self.age</code> a du sens (ici : <code>mathis.age</code>).</p> </li> <li> <p>Tester une \u00e0 une dans la console, chacune des instructions suivantes : Quelques contr\u00f4les<pre><code>mathis.age\nmathis.vieillir()\nmathis.age\nelise.age\nEleve.vieillir(mathis)\nmathis.age\nelise.age\n</code></pre></p> </li> </ol> </li> <li> <ol> <li>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n    nom = \"Catteau\"\n    age = 17\n    notes = [20, 13, 15]\n\n    def ajouter_note(self, note):\n        self.notes.append(note)\n\nmathis = Eleve()\nelise  = Eleve()\n</code></pre></li> <li> <p>Tester une \u00e0 une dans la console, chacune des instructions suivantes : Quelques contr\u00f4les<pre><code>mathis.notes\nEleve.ajouter_note(mathis, 17)\nmathis.notes\nelise.notes\nelise.ajouter_note(10)\nmathis.notes\nelise.notes\n</code></pre></p> <p>Important</p> <p>On n'oublie pas que <code>self</code> fait r\u00e9f\u00e9rence \u00e0 l'objet qui appelle l'action.</p> </li> </ol> </li> </ol> <p>On vient de voir que les propri\u00e9t\u00e9s mutables partag\u00e9es posent des difficult\u00e9s et emp\u00eachent la personnalisation. Mais si les actions peuvent \u00eatre personnalis\u00e9es, les propri\u00e9t\u00e9s (m\u00eame les mutables) le peuvent \u00e9galement !</p> <p>Propri\u00e9t\u00e9s personnelles</p> <ol> <li> <ol> <li> <p>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n\n    def nommer(self, nom):\n        self.nom = nom\n\n    def aimer(self, autre_eleve:\"Eleve\"):\n        self.amour = autre_eleve.nom\n\nmathis = Eleve()\nelise  = Eleve()\n</code></pre></p> <p>Important</p> <p>L'instruction <code>self.amour = ...</code> d\u00e9finit une propri\u00e9t\u00e9 <code>amour</code> pour l'objet qui fait appel \u00e0 l'action <code>aimer</code> (ici <code>mathis</code>)</p> </li> <li> <p>Tester une \u00e0 une dans la console, chacune des instructions suivantes : Quelques contr\u00f4les<pre><code>mathis.nommer(\"Mathis\")\nmathis.nom\nelise.nom\nelise.nommer(\"\u00c9lise\")\nelise.nom\nmathis.aimer(elise)\nmathis.amour\nelise.amour\n</code></pre></p> </li> </ol> </li> <li> <ol> <li> <p>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n\n    def initialiser(self, nom, age):\n        self.nom   = nom\n        self.age   = age\n        self.notes = []\n\n    def ajouter_note(self, val):\n        self.notes.append(val)\n\nmathis = Eleve()\nelise  = Eleve()\n\nmathis.initialiser(\"Mathis\", 18)\nelise.initialiser(\"\u00c9lise\", 16)\n\nmathis.ajouter_note(15)\nelise.ajouter_note(17)\n</code></pre></p> <p>Important</p> <p>L'\u00e9tape d'initialisation est essentielle pour d\u00e9finir les propri\u00e9t\u00e9s personnelles des objets.</p> </li> <li> <p>Tester une \u00e0 une dans la console, chacune des instructions suivantes : Quelques contr\u00f4les<pre><code>mathis.notes\nelise.notes\nmathis.ajouter_note(12)\nmathis.notes\nelise.notes\nEleve.notes\n</code></pre></p> </li> </ol> </li> </ol> <p>On se rend compte alors que les instructions <code>mathis = Eleve()</code> et <code>mathis.initialiser(\"Mathis\", 18)</code> ne devraient faire qu'une. C'est le r\u00f4le de l'action sp\u00e9ciale <code>__init__</code>.</p> <p>Les actions sp\u00e9ciales</p> <ol> <li> <ol> <li>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n\n    def __init__(self, nom, age):\n        self.nom = nom\n        self.age = age        \n\nmathis = Eleve(\"Mathis\", 18)\nelise  = Eleve(\"\u00c9lise\", 16)\n</code></pre></li> <li>Tester une \u00e0 une dans la console, chacune des instructions suivantes : Quelques contr\u00f4les<pre><code>f\"{mathis.nom} + {elise.nom} = {chr(0x2665)}\"\nf\"{mathis.nom} {chr(128139)} {elise.nom}\"\n</code></pre></li> </ol> </li> <li> <ol> <li>Corriger le fichier eleve.py avec le code suivant : Implantation d'une classe Eleve'<pre><code>class Eleve:\n\n    def __init__(self, nom, age):\n        self.nom = nom\n        self.age = age\n\n    def __repr__(self):\n        return f\"{self.nom} ({self.age} ans)\"        \n\nmathis = Eleve(\"Mathis\", 18)\nelise  = Eleve(\"\u00c9lise\", 16)\n</code></pre></li> <li>Tester une \u00e0 une dans la console, chacune des instructions suivantes : Quelques contr\u00f4les<pre><code>mathis\nelise\nEleve(\"Zakaria\", 17)\n</code></pre></li> </ol> </li> </ol>"},{"location":"#a-votre-tour","title":"\u00c0 votre tour","text":"<p>Travail personnel</p> <ol> <li>\u00c9crire une classe mod\u00e9lisant une date de Calendrier.</li> </ol>"}]}